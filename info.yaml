---
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

  # If using an HDL, set wokwi_id as 0 and uncomment and list your source files here.
  # Source files must be in ./src and you must list each source file separately
  source_files:
    - tt_um_rtfb_collatz.v
  top_module:  "tt_um_rtfb_collatz"

  # How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x2"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation:
  author:       "Vytautas Å altenis"
  title:        "Collatz conjecture brute-forcer"
  language:     "Verilog"
  description:  |
    Runs a Collatz orbit calculation for a given number, outputs orbit length
    and the upper 16 bits of the highest number of the sequence.

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      Explain how your project works

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Explain how to test your project

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:
    - 'Bits 0-7 - input byte, to be written to an address specified in lower 5 bits of bidirectional input.'
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - 'Bits 0-7 - output byte of one of the output numbers, as specified in bits 0, 1 and 5 of bidirectional input.'
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - 'Bits 0-4 - address of a byte to be read or written.'
    - 'Bit 5: orbit/path select: set to 0 to read orbit length, set to 1 to read the upper 16 bits of the highest number of the sequence.'
    - 'Bit 6: start compute: pull this pin up to indicate end of input and start the computation.'
    - |
      Bit 7 - write enable or compute busy indicator. When doing I/O, pull this
      pin up to write input byte to an address. Make sure to wait a cycle
      between setting the write address and pulling this up. When not doing I/O,
      this bit is pulled up by the chip to indicate the busy state. When it is
      done computing, it will be pulled down and the results can be read back.

# The following fields are optional
  tag:          "collatz, brute-force, accelerator"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      "vytas.rtfb"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
